{"ast":null,"code":"var _jsxFileName = \"/Users/yuhanwang/git1/stake-solana/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Connection } from \"@solana/web3.js\";\nimport * as web3 from '@solana/web3.js';\nimport { useEffect, useState } from 'react';\nimport { stakeSOL } from './stakeSOL';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NETWORK = web3.clusterApiUrl(\"devnet\");\nconst connection = new Connection(NETWORK);\n\nfunction App() {\n  _s();\n\n  const [provider, setProvider] = useState();\n  const [providerPubKey, setProviderPub] = useState();\n  const [stakeSOLDetails, setStakeSOLDetails] = useState({});\n\n  const stakeSOLHandler = async () => {\n    try {\n      const totalSolToStake = 1 * web3.LAMPORTS_PER_SOL; // in SOL\n\n      const result = await stakeSOL(totalSolToStake, provider, connection);\n      setStakeSOLDetails(result);\n    } catch (err) {\n      console.log(err, '---stake error---');\n    }\n  };\n\n  const connectToWallet = () => {\n    if (!provider && window.solana) {\n      setProvider(window.solana);\n    }\n\n    if (!provider) {\n      console.log(\"No provider found\");\n      return;\n    }\n\n    if (provider && !provider.isConnected) {\n      provider.connect();\n    }\n  };\n\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"connect\", async () => {\n        console.log(\"wallet got connected\");\n        setProviderPub(provider.publicKey);\n      });\n      provider.on(\"disconnect\", () => {\n        console.log(\"Disconnected from wallet\");\n      });\n    }\n  }, [provider]);\n  useEffect(() => {\n    if (\"solana\" in window && !provider) {\n      console.log(\"Phantom wallet present\");\n      setProvider(window.solana);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectToWallet,\n        children: [\" \", providerPubKey ? 'Connected' : 'Connect', \" to wallet \", providerPubKey ? providerPubKey.toBase58() : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stakeSOLHandler,\n        children: [\" \", stakeSOLDetails && stakeSOLDetails.newStakingAccountPubKey ? `Staked SOL acccount: ${stakeSOLDetails.newStakingAccountPubKey}` : `Stake SOL`, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3HzL8I0pTrJxpvdsoDI4KgCVN1I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yuhanwang/git1/stake-solana/src/App.js"],"names":["Connection","web3","useEffect","useState","stakeSOL","NETWORK","clusterApiUrl","connection","App","provider","setProvider","providerPubKey","setProviderPub","stakeSOLDetails","setStakeSOLDetails","stakeSOLHandler","totalSolToStake","LAMPORTS_PER_SOL","result","err","console","log","connectToWallet","window","solana","isConnected","connect","on","publicKey","toBase58","newStakingAccountPubKey"],"mappings":"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","sourcesContent":["import './App.css';\nimport { Connection } from \"@solana/web3.js\";\nimport * as web3 from '@solana/web3.js';\nimport { useEffect, useState } from 'react';\nimport { stakeSOL } from './stakeSOL';\n\nconst NETWORK = web3.clusterApiUrl(\"devnet\");\nconst connection = new Connection(NETWORK);\n\nfunction App() {\n\n  const [provider, setProvider] = useState()\n  const [providerPubKey, setProviderPub] = useState()\n  const [stakeSOLDetails, setStakeSOLDetails] = useState({})\n  const stakeSOLHandler = async () => {\n    try {\n      const totalSolToStake = 1 * web3.LAMPORTS_PER_SOL; // in SOL\n      const result = await stakeSOL(totalSolToStake, provider, connection)\n      setStakeSOLDetails(result)\n    } catch (err) {\n      console.log(err, '---stake error---')\n    }\n  }\n\n  const connectToWallet = () => {\n    if (!provider && window.solana) {\n      setProvider(window.solana)\n    }\n    if (!provider) {\n      console.log(\"No provider found\")\n      return\n    }\n    if (provider && !provider.isConnected) {\n      provider.connect()\n    }\n  }\n\n\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"connect\", async () => {\n        console.log(\"wallet got connected\")\n        setProviderPub(provider.publicKey)\n\n      });\n      provider.on(\"disconnect\", () => {\n        console.log(\"Disconnected from wallet\");\n      });\n    }\n  }, [provider]);\n\n  useEffect(() => {\n    if (\"solana\" in window && !provider) {\n      console.log(\"Phantom wallet present\")\n      setProvider(window.solana)\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <button onClick={connectToWallet}> {providerPubKey ? 'Connected' : 'Connect'} to wallet {providerPubKey ? (providerPubKey).toBase58() : \"\"}</button>\n        <button onClick={stakeSOLHandler}> {stakeSOLDetails && stakeSOLDetails.newStakingAccountPubKey ? `Staked SOL acccount: ${stakeSOLDetails.newStakingAccountPubKey}` : `Stake SOL`} </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}