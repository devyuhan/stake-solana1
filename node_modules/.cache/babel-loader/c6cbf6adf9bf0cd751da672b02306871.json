{"ast":null,"code":"import { Authorized, Keypair, PublicKey, StakeProgram, Transaction } from \"@solana/web3.js\";\nexport const stakeSOL = async (totalSolToStake, provider, connection) => {\n  totalSolToStake = totalSolToStake || 1 * 1000000000; //1 SOL in lamports\n\n  if (!provider || provider && !provider.isConnected) {\n    return \"Wallet is not connected, please connect the wallet\";\n  } //TODO: hardcoded validator's voting account from solanaBeach\n\n\n  const votingAccountToDelegate = new PublicKey('BXKwE3p8gmwwnepGxpgo1bUSU1pLzGZoNUC1dFUcbG3t');\n  const newStakingAccount = Keypair.generate();\n  const staker = provider.publicKey;\n  const withdrawer = staker;\n  const authorizedStakerInstance = new Authorized(staker, withdrawer);\n  const transaction = new Transaction().add( // createAccount\n  StakeProgram.createAccount({\n    fromPubkey: provider.publicKey,\n    stakePubkey: newStakingAccount.publicKey,\n    authorized: authorizedStakerInstance,\n    lamports: totalSolToStake\n  }));\n  transaction.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n  transaction.feePayer = provider.publicKey;\n  transaction.add(StakeProgram.delegate({\n    stakePubkey: newStakingAccount.publicKey,\n    authorizedPubkey: staker,\n    votePubkey: votingAccountToDelegate\n  }));\n  transaction.partialSign(newStakingAccount);\n\n  try {\n    let signed = await provider.signTransaction(transaction);\n    console.log('Got signature, submitting transaction', signed);\n    let signature = await connection.sendRawTransaction(signed.serialize());\n    console.log('Submitted transaction ' + signature + ', awaiting confirmation');\n    await connection.confirmTransaction(signature);\n    console.log('Transaction ' + signature + ' confirmed');\n    return {\n      newStakingAccountPubKey: newStakingAccount.publicKey,\n      transactionId: signature\n    };\n  } catch (err) {\n    console.log(err, '----err----');\n  }\n};","map":{"version":3,"sources":["/Users/yuhanwang/git1/stake-solana/src/stakeSOL.js"],"names":["Authorized","Keypair","PublicKey","StakeProgram","Transaction","stakeSOL","totalSolToStake","provider","connection","isConnected","votingAccountToDelegate","newStakingAccount","generate","staker","publicKey","withdrawer","authorizedStakerInstance","transaction","add","createAccount","fromPubkey","stakePubkey","authorized","lamports","recentBlockhash","getRecentBlockhash","blockhash","feePayer","delegate","authorizedPubkey","votePubkey","partialSign","signed","signTransaction","console","log","signature","sendRawTransaction","serialize","confirmTransaction","newStakingAccountPubKey","transactionId","err"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,SAA9B,EAAyCC,YAAzC,EAAuDC,WAAvD,QAA0E,iBAA1E;AAEA,OAAO,MAAMC,QAAQ,GAAG,OAAOC,eAAP,EAAwBC,QAAxB,EAAkCC,UAAlC,KAAiD;AACrEF,EAAAA,eAAe,GAAGA,eAAe,IAAI,IAAI,UAAzC,CADqE,CAChB;;AACrD,MAAI,CAACC,QAAD,IAAcA,QAAQ,IAAI,CAACA,QAAQ,CAACE,WAAxC,EAAsD;AAClD,WAAO,oDAAP;AAEH,GALoE,CAOrE;;;AACA,QAAMC,uBAAuB,GAAG,IAAIR,SAAJ,CAAc,8CAAd,CAAhC;AAEA,QAAMS,iBAAiB,GAAGV,OAAO,CAACW,QAAR,EAA1B;AACA,QAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAxB;AACA,QAAMC,UAAU,GAAGF,MAAnB;AACA,QAAMG,wBAAwB,GAAG,IAAIhB,UAAJ,CAAea,MAAf,EAAuBE,UAAvB,CAAjC;AACA,QAAME,WAAW,GAAG,IAAIb,WAAJ,GAAkBc,GAAlB,EAChB;AACAf,EAAAA,YAAY,CAACgB,aAAb,CAA2B;AACvBC,IAAAA,UAAU,EAAEb,QAAQ,CAACO,SADE;AAEvBO,IAAAA,WAAW,EAAEV,iBAAiB,CAACG,SAFR;AAGvBQ,IAAAA,UAAU,EAAEN,wBAHW;AAIvBO,IAAAA,QAAQ,EAAEjB;AAJa,GAA3B,CAFgB,CAApB;AASAW,EAAAA,WAAW,CAACO,eAAZ,GAA8B,CAC1B,MAAMhB,UAAU,CAACiB,kBAAX,EADoB,EAE5BC,SAFF;AAGAT,EAAAA,WAAW,CAACU,QAAZ,GAAuBpB,QAAQ,CAACO,SAAhC;AACAG,EAAAA,WAAW,CAACC,GAAZ,CACIf,YAAY,CAACyB,QAAb,CAAsB;AAClBP,IAAAA,WAAW,EAAEV,iBAAiB,CAACG,SADb;AAElBe,IAAAA,gBAAgB,EAAEhB,MAFA;AAGlBiB,IAAAA,UAAU,EAAEpB;AAHM,GAAtB,CADJ;AAOAO,EAAAA,WAAW,CAACc,WAAZ,CAAwBpB,iBAAxB;;AACA,MAAI;AACA,QAAIqB,MAAM,GAAG,MAAMzB,QAAQ,CAAC0B,eAAT,CAAyBhB,WAAzB,CAAnB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDH,MAArD;AACA,QAAII,SAAS,GAAG,MAAM5B,UAAU,CAAC6B,kBAAX,CAA8BL,MAAM,CAACM,SAAP,EAA9B,CAAtB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CACI,2BAA2BC,SAA3B,GAAuC,yBAD3C;AAGA,UAAM5B,UAAU,CAAC+B,kBAAX,CAA8BH,SAA9B,CAAN;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBC,SAAjB,GAA6B,YAAzC;AAGA,WAAO;AAAEI,MAAAA,uBAAuB,EAAE7B,iBAAiB,CAACG,SAA7C;AAAwD2B,MAAAA,aAAa,EAAEL;AAAvE,KAAP;AACH,GAZD,CAYE,OAAOM,GAAP,EAAY;AACVR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ,EAAiB,aAAjB;AACH;AAEJ,CAnDM","sourcesContent":["import { Authorized, Keypair, PublicKey, StakeProgram, Transaction } from \"@solana/web3.js\"\n\nexport const stakeSOL = async (totalSolToStake, provider, connection) => {\n    totalSolToStake = totalSolToStake || 1 * 1000000000  //1 SOL in lamports\n    if (!provider || (provider && !provider.isConnected)) {\n        return \"Wallet is not connected, please connect the wallet\"\n\n    }\n\n    //TODO: hardcoded validator's voting account from solanaBeach\n    const votingAccountToDelegate = new PublicKey('BXKwE3p8gmwwnepGxpgo1bUSU1pLzGZoNUC1dFUcbG3t')\n\n    const newStakingAccount = Keypair.generate();\n    const staker = provider.publicKey;\n    const withdrawer = staker;\n    const authorizedStakerInstance = new Authorized(staker, withdrawer);\n    const transaction = new Transaction().add(\n        // createAccount\n        StakeProgram.createAccount({\n            fromPubkey: provider.publicKey,\n            stakePubkey: newStakingAccount.publicKey,\n            authorized: authorizedStakerInstance,\n            lamports: totalSolToStake\n        })\n    );\n    transaction.recentBlockhash = (\n        await connection.getRecentBlockhash()\n    ).blockhash;\n    transaction.feePayer = provider.publicKey;\n    transaction.add(\n        StakeProgram.delegate({\n            stakePubkey: newStakingAccount.publicKey,\n            authorizedPubkey: staker,\n            votePubkey: votingAccountToDelegate\n        })\n    );\n    transaction.partialSign(newStakingAccount);\n    try {\n        let signed = await provider.signTransaction(transaction);\n        console.log('Got signature, submitting transaction', signed);\n        let signature = await connection.sendRawTransaction(signed.serialize());\n        console.log(\n            'Submitted transaction ' + signature + ', awaiting confirmation'\n        );\n        await connection.confirmTransaction(signature);\n        console.log('Transaction ' + signature + ' confirmed');\n\n\n        return { newStakingAccountPubKey: newStakingAccount.publicKey, transactionId: signature }\n    } catch (err) {\n        console.log(err, '----err----')\n    }\n\n}"]},"metadata":{},"sourceType":"module"}